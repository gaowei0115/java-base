闭锁：
	一种同步故居类，可以延迟线程进度直到达到终止状态，闭锁作用相当于一扇门，在闭锁到达结束状态之前，这扇门一直关闭，并且没有任何线程能通过，
	当到达结束状态时，这扇门会打开所有线程通过。当闭锁达到结束状态后，将不会再改变状态，因此这扇门将永远保持打开状态，闭锁可以确保其它活动执行
	完成后才继续执行。
	1. 确保某个计算在其需要的所有资源都被初始化后才能继续执行。二元闭锁（包括两个状态）可以用来表示“资源R已经被初始化”，而所有需要R的操作
	都必须先在这个闭锁上等待。
	2. 确保某个服务在其依赖的所有其他服务都已经启动之后才启动。每个服务都有一个相关的二元闭锁。当启动服务S时，将首先在S依赖的其它服务的闭锁
	上等待，在所有一开的服务都启动后会释放闭锁S，这样其他依赖S的服务才能继续执行。
	3. 等待直到某个操作的所有参与者都就绪再继续执行。这种情况中，当所有服务都准备就绪时，，闭锁将达到结束状态。
	
	ConutDownLatch是一种灵活的闭锁实现，可以在上述情况中使用，它可以使一个或者多个线程等待一组事件发生。闭锁状态包括一个计数器，该计数器被
	初始化为一个正数，表示需要等待事件数量。countDown方法递减计数器，表示有一个事件已经发生了，而await方法等待计数器达到为零，这表示所有需要
	等待的时间都已经发生。如果计数器的值非零，那么await会一直阻塞直到计数器为零，或者等待中的线程中断，或者等待超时。
	